###################################################################
# you need to edit the following "configBaseDirectory" parameter, this need
# to be a directory apache2 includes and where your user has "rwx" permissions
# On a Debian based distro, usually you need just a:
#
# sudo mkdir /etc/apache2/sites-enabled/autogenerated/
# sudo chown <your_username> /etc/apache2/sites-enabled/autogenerated/
#
# You should edit baseDocumentRoot too, it is the directory where 
# you will put your DocumentRoot directories
###################################################################
configBaseDirectory = "/etc/apache2/sites-enabled/autogenerated"
baseDocumentRoot = "/var/www"
###################################################################

ctlCommand = ("/usr/sbin/apache2ctl","-t")
reloadCommand = ("sudo", "/usr/sbin/apache2ctl", "graceful")
virtualHostData = ["",""]
devnull = open("/dev/null","w")

import virtualhost
import subprocess
import sys

def getvirtualHostData():
    if len(sys.argv) < 2:
        print "Syntax: " + sys.argv[0] + " virtual_host_name [<virtual_alias>  <virtual_alias> ...]\n"
        exit()
    else:
        virtualHostData[0] = sys.argv[1] # we really should check correctness here...
        if len(sys.argv) > 1:  # we really should check correctness here...
           for alias in sys.argv[2:]:
                virtualHostData[1] = virtualHostData[1] + " " + alias

def createVirtualHostFile(apacheconfigfile):
    myVirtualHost = virtualhost.virtualhost(virtualHostData[0],baseDocumentRoot,virtualHostData[1])
    filehandle = open(apacheconfigfile,"w")
    filehandle.write(myVirtualHost.printconfig())
    filehandle.close()

def checkApacheConfigCorrectness():
    try:
        returnvalue = subprocess.call(ctlCommand,stdout=devnull,stderr=subprocess.STDOUT)
        if not returnvalue:
            return True
        else:
            print "Something wrong with apache configs... aborting"
    except OSError:
        print "Can't check config files"
    return False

def reloadApacheConfiguration():
    try:
        returnvalue = subprocess.call(reloadCommand)
        if returnvalue:
            print "Can't reload Apache configuration... aborting"
            return False
        return True
    except OSError:
        print "Can't reload Apache configuration... aborting badly"
        return False

if __name__ == '__main__':
    getvirtualHostData()
    try:
        createVirtualHostFile(configBaseDirectory + "/" + virtualHostData[0])
    except IOError:
        print "Something wrong with your configs, buddy..."
        exit()
    if checkApacheConfigCorrectness():
        if reloadApacheConfiguration():
            print "Virtual-host for " + virtualHostData[0] + " domain created succesfully"
